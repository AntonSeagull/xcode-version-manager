package main

import (
	"bufio"
	"errors"
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
)

const (
	appsDir      = "/Applications"
	xcodeApp     = "/Applications/Xcode.app"
	plistBuddy   = "/usr/libexec/PlistBuddy"
	infoPlistRel = "Contents/Info.plist"
	developerRel = "Contents/Developer"
)

func main() {
	if len(os.Args) < 2 {
		usage()
		return
	}

	switch os.Args[1] {
	case "list":
		handleList()
	case "current":
		handleCurrent()
	case "switch":
		handleSwitch(os.Args[2:])
	default:
		usage()
	}
}

func usage() {
	fmt.Println(`xvm ‚Äî Xcode Version Manager (Go)

–ö–æ–º–∞–Ω–¥—ã / Commands:
  xvm list            ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ Xcode –∏ –∞–∫—Ç–∏–≤–Ω—É—é / list installed Xcode versions
  xvm current         ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é Xcode / show currently active Xcode
  xvm switch <ver>    ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é / switch to specific version
     –û–ø—Ü–∏–∏ / Options:
       --dry-run      ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ / show planned actions without changes

–ü—Ä–∏–º–µ—Ä—ã / Examples:
  xvm list
  xvm current
  sudo xvm switch 16.2
  xvm switch 16.2 --dry-run
`)
}

func handleList() {
	activePath, activeVer, _ := activeXcode()
	fmt.Printf("–ê–∫—Ç–∏–≤–Ω–∞—è / Active: %s (%s)\n", displayApp(activePath), valueOr(activeVer, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ / unknown"))

	entries, err := findXcodes()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ / Search error:", err)
		return
	}

	if len(entries) == 0 {
		fmt.Println("‚ùå –í /Applications Xcode –Ω–µ –Ω–∞–π–¥–µ–Ω / No Xcode installations found in /Applications")
		return
	}

	fmt.Println("\n–ù–∞–π–¥–µ–Ω–æ / Found in /Applications:")
	for _, e := range entries {
		marker := " "
		if sameFile(e.path, activePath) {
			marker = "*"
		}
		fmt.Printf(" %s %s (%s)\n", marker, displayApp(e.path), valueOr(e.version, "–≤–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ / unknown version"))
	}
}

func handleCurrent() {
	path, ver, err := activeXcode()
	if err != nil {
		fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Xcode / Failed to detect active Xcode:", err)
		return
	}
	fmt.Printf("–ê–∫—Ç–∏–≤–Ω—ã–π Xcode / Active Xcode:\n%s\n–í–µ—Ä—Å–∏—è / Version: %s\n", displayApp(path), valueOr(ver, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ / unknown"))
}

func handleSwitch(args []string) {
	fs := flag.NewFlagSet("switch", flag.ContinueOnError)
	dryRun := fs.Bool("dry-run", false, "—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å / dry run only")
	_ = fs.Parse(args)

	if fs.NArg() < 1 {
		fmt.Println("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é / Please specify a version, –Ω–∞–ø—Ä–∏–º–µ—Ä / for example: xvm switch 16.2")
		return
	}
	targetVer := strings.TrimSpace(fs.Arg(0))

	// 1) –ù–∞–π–¥—ë–º —Ü–µ–ª–µ–≤–æ–π Xcode
	targetApp := filepath.Join(appsDir, fmt.Sprintf("Xcode-%s.app", targetVer))
	if !pathExists(targetApp) {
		fmt.Printf("‚ùå %s –Ω–µ –Ω–∞–π–¥–µ–Ω / not found.\n", targetApp)
		fmt.Println("üì• –°–∫–∞—á–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ / Download from:")
		fmt.Println("   üîó https://developer.apple.com/download/all/")
		fmt.Printf("   –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ %s –∫–∞–∫ \"Xcode-%s.app\"\n", appsDir, targetVer)
		fmt.Printf("   –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ / Then run: sudo xvm switch %s\n", targetVer)
		return
	}

	// 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π
	activePath, currVer, err := activeXcode()
	if err != nil {
		fmt.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Xcode / Failed to detect active Xcode:", err)
		activePath = xcodeApp
		currVer, _ = readXcodeVersion(activePath)
	}

	// 3) –ì–æ—Ç–æ–≤–∏–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
	var planned []string
	if strings.EqualFold(activePath, xcodeApp) && pathExists(xcodeApp) {
		if currVer == "" {
			currVer = "current"
		}
		newName := filepath.Join(appsDir, fmt.Sprintf("Xcode-%s.app", currVer))
		if sameFile(newName, targetApp) {
			// —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
		} else if pathExists(newName) {
			newName = disambiguate(newName)
		}
		planned = append(planned, fmt.Sprintf("mv %q %q", xcodeApp, newName))
		if !*dryRun {
			if err := os.Rename(xcodeApp, newName); err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è / rename error:", err)
				return
			}
		}
	}

	// 4) –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π
	if !sameFile(targetApp, xcodeApp) {
		planned = append(planned, fmt.Sprintf("mv %q %q", targetApp, xcodeApp))
		if !*dryRun {
			if err := os.Rename(targetApp, xcodeApp); err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ Xcode / rename target error:", err)
				return
			}
		}
	}

	// 5) –û–±–Ω–æ–≤–∏—Ç—å xcode-select
	planned = append(planned, fmt.Sprintf("xcode-select -s %s", filepath.Join(xcodeApp, developerRel)))
	if !*dryRun {
		if err := run("xcode-select", "-s", filepath.Join(xcodeApp, developerRel)); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ xcode-select / xcode-select error:", err)
			return
		}
	}

	// 6) –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	newVer := ""
	if !*dryRun {
		newVer, _ = activeVersionViaXcodebuild()
	}

	if *dryRun {
		fmt.Println("\nüß™ –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω / Dry Run:")
		for _, s := range planned {
			fmt.Println("  ", s)
		}
		fmt.Println("‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ / No changes applied.")
	} else {
		fmt.Printf("\n‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ / Switch complete.\n–ë—ã–ª–æ / Was: %s ‚Üí –°—Ç–∞–ª–æ / Now: %s\n", valueOr(currVer, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), valueOr(newVer, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
	}
}

// ===== helpers =====

type xcodeEntry struct {
	path    string
	version string
}

func findXcodes() ([]xcodeEntry, error) {
	globs := []string{
		filepath.Join(appsDir, "Xcode.app"),
		filepath.Join(appsDir, "Xcode-*.app"),
	}
	var paths []string
	for _, g := range globs {
		m, _ := filepath.Glob(g)
		paths = append(paths, m...)
	}
	seen := map[string]bool{}
	var out []xcodeEntry
	for _, p := range paths {
		rp, _ := filepath.EvalSymlinks(p)
		if rp == "" {
			rp = p
		}
		if seen[rp] {
			continue
		}
		seen[rp] = true
		ver, _ := readXcodeVersion(rp)
		out = append(out, xcodeEntry{path: rp, version: ver})
	}
	return out, nil
}

func readXcodeVersion(appPath string) (string, error) {
	if !pathExists(appPath) {
		return "", os.ErrNotExist
	}
	info := filepath.Join(appPath, infoPlistRel)
	if pathExists(plistBuddy) && pathExists(info) {
		out, err := exec.Command(plistBuddy, "-c", "Print :CFBundleShortVersionString", info).CombinedOutput()
		if err == nil {
			return strings.TrimSpace(string(out)), nil
		}
	}
	xb := filepath.Join(appPath, developerRel, "usr/bin/xcodebuild")
	if pathExists(xb) {
		out, err := exec.Command(xb, "-version").CombinedOutput()
		if err == nil {
			sc := bufio.NewScanner(strings.NewReader(string(out)))
			if sc.Scan() {
				line := sc.Text()
				re := regexp.MustCompile(`Xcode\s+([0-9.]+)`)
				m := re.FindStringSubmatch(line)
				if len(m) == 2 {
					return m[1], nil
				}
			}
		}
	}
	return "", errors.New("–≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ / version not found")
}

func activeXcode() (appPath, version string, err error) {
	devPathOut, err := exec.Command("xcode-select", "-p").CombinedOutput()
	if err != nil {
		return "", "", err
	}
	devPath := strings.TrimSpace(string(devPathOut))
	appPath = filepath.Clean(filepath.Join(devPath, "..", ".."))
	ver, _ := readXcodeVersion(appPath)
	return appPath, ver, nil
}

func activeVersionViaXcodebuild() (string, error) {
	out, err := exec.Command("xcodebuild", "-version").CombinedOutput()
	if err != nil {
		return "", err
	}
	sc := bufio.NewScanner(strings.NewReader(string(out)))
	if sc.Scan() {
		line := sc.Text()
		re := regexp.MustCompile(`Xcode\s+([0-9.]+)`)
		m := re.FindStringSubmatch(line)
		if len(m) == 2 {
			return m[1], nil
		}
	}
	return "", errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å / failed to parse xcodebuild output")
}

func run(name string, args ...string) error {
	cmd := exec.Command(name, args...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}

func pathExists(p string) bool {
	_, err := os.Stat(p)
	return err == nil
}

func sameFile(a, b string) bool {
	ra, _ := filepath.EvalSymlinks(a)
	rb, _ := filepath.EvalSymlinks(b)
	if ra == "" {
		ra = a
	}
	if rb == "" {
		rb = b
	}
	return filepath.Clean(ra) == filepath.Clean(rb)
}

func displayApp(p string) string {
	if p == "" {
		return "(–Ω–µ –Ω–∞–π–¥–µ–Ω / not found)"
	}
	return p
}

func valueOr(s, alt string) string {
	if strings.TrimSpace(s) == "" {
		return alt
	}
	return s
}

func disambiguate(path string) string {
	base := path
	i := 1
	for pathExists(path) {
		path = fmt.Sprintf("%s-%d", base, i)
		i++
	}
	return path
}
